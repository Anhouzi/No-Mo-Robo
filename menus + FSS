clearColor = [0, 0, 0, 0];
use2D = true;
initGame("canvas");

function Screen(alwaysUpdate, alwaysDraw){
    Sprite.call(this);
    
    this.alwaysUpdate = alwaysUpdate;
    this.alwaysDraw = alwaysDraw;
    
    this.stage = new Sprite();
    this.addChild(this.stage);
    
    this.gui = new GUI(gInput);
    this.addChild(this.gui);
    
    this.initialized = false;
}
Screen.prototype = new Sprite();

Screen.prototype.init = function(){
}

function ScreenManager(){
    Sprite.call(this);
    
    this.screens = new List();
}
ScreenManager.prototype = new Sprite();

ScreenManager.prototype.push = function(screen){
    this.screens.remove(screen);
    this.screens.push(screen);
}

ScreenManager.prototype.pop = function(){
    this.screens.tail.item.gui.visible = false;
    return this.screens.pop();
}

ScreenManager.prototype.remove = function(screen){
    screen.gui.visible = false;
    this.screens.remove(screen);
}

ScreenManager.prototype.update = function(d){
    var screens = this.screens;
    
    for(var node = screens.head; node != null; node = node.link){
        var screen = node.item;
        
        if(node != screens.tail){
            screen.gui.visible = false;
        }else{
            screen.gui.visible = true;
        }
        
        if(screen.alwaysUpdate || node == screens.tail){
            if(!screen.initialized){
                screen.init();
                screen.initialized = true;
            }
            
            screen.update();
        }
    }
}

ScreenManager.prototype.draw = function(ctx){
    var screens = this.screens;
    
    for(var node = screens.head; node != null; node = node.link){
        var screen = node.item;
        
        if(screen.alwaysDraw || node == screens.tail){
            screen.draw(ctx);
        }
    }    
}

var screenMan = new ScreenManager();
world.addChild(screenMan);

var mainMenu = new Screen(false, false);
screenMan.push(mainMenu);
mainMenu.image = Textures.load();

mainMenu.init = function(){
    var newGame = new TextButton("New Game");
    newGame.setLabelColors("#aaaaaa", "#00ff00", "#ff0000");
    newGame.x = 60;
    newGame.y = 95;
    this.gui.addChild(newGame);
    newGame.func = function(){
        screenMan.push(gameScreen);
    }
}

var gameScreen = new Screen(false, true);
gameScreen.init = function(){
    var sprite = new Sprite();
    use2D = true;

//Create a new Sprite
var mySprite = new Sprite();

//Set its dimensions
mySprite.width = 100;
mySprite.height = 100;

//Shift the sprite so that its origin is at its center
//The offset is negative because we are moving the sprite relative to its origin and not the origin relative to the sprite
mySprite.xoffset = -mySprite.width/2;
mySprite.yoffset = -mySprite.height/2;

//Set the sprite's texture
mySprite.image = Textures.load("http://people.ucsc.edu/~elipschu/images/logo.png");

//Add the sprite to the world
gameScreen.addChild(mySprite);

//Override the default update function
//Define some variables to hold the sprite's x and y velocities
var xvel = 1;
var yvel = 1;
mySprite.update = function(d){
    //Add the velocities to the sprite's position
    this.x += xvel;
    this.y += yvel;
    
    //If the sprite hits a boundary make it change direction
    //If it hits the left edge
    if(this.x < 0){
        //Reverse the x velocity
        xvel *= -1;

        //Position the sprite so that it's back within the bounds
        this.x = 0;

    //If it hits the right edge
    }else if(this.x > canvas.width){
        //Reverse the x velocity
        xvel *= -1;

        //Position the sprite so that it's back within the bounds
        this.x = canvas.width;
    }
    
    //If it hits the top edge (the top left corner of the canvas is 0,0)
    if(this.y < 0){
        //Reverse the x velocity
        yvel *= -1;

        //Position the sprite so that it's back within the bounds
        this.y = 0;

    //If it hits the bottom edge
    }if(this.y > canvas.height){
        //Reverse the x velocity
        yvel *= -1;

        //Position the sprite so that it's back within the bounds
        this.y = canvas.height;
    }
    
    //Rotate the sprite by 5 degrees. DTR(degrees) converts degrees to radians
    this.rotation += DTR(5);
}
    
initGame("canvas");
    
    this.stage.addChild(sprite);
}

var pauseMenu = new Screen(true, true);
pauseMenu.init = function(){
    var unpause = new TextButton("Paused");
    var resume = new TextButton("Resume");
    var quit = new TextButton("Quit");
    unpause.setLabelColors("#aaaaaa", "#00ff00", "#ff0000");
    resume.setLabelColors("#aaaaaa", "#00ff00", "#ff0000");
    quit.setLabelColors("#aaaaaa", "#00ff00", "#ff0000");
      resume.x =60;
      resume.y = 90;
      quit.x = 65;
      quit.y = 110;
    this.gui.addChild(unpause);
    this.gui.addChild(resume);
    this.gui.addChild(quit);
    resume.func = function(){ 
        screenMan.remove(pauseMenu);
    }
    quit.func = function(){
    screenMan.remove(pauseMenu);
    screenMan.remove(gameScreen);
    
    }
    
}

//Map the p key to launch the Pause Menu
gInput.addFunc(80, function(){
    screenMan.push(pauseMenu);
});
